import networkx as nx
import matplotlib.pyplot as plt

# Create a directed graph with edge weights
G = nx.DiGraph()

# Add weighted edges (u, v, weight)
edges = [
    (0, 1, 3), (0, 3, 4),
    (1, 4, 1), (1, 3, 7),
    (2, 1, 4),
    (3, 2, 2), (3, 4, 2),
    (4, 2, 5)
]
G.add_weighted_edges_from(edges)

# Choose the source node
source = 0

# Compute the shortest path from the source using Dijkstra's algorithm
shortest_paths = nx.single_source_dijkstra_path_length(G, source)

# Visualize the graph with node labels, edge weights, and shortest paths highlighted
plt.figure(figsize=(8, 6))
pos = nx.spring_layout(G)  # Position the nodes using spring layout

# Draw the nodes and edges
nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=2000, font_size=15, font_weight='bold', arrows=True)

# Draw edge labels (weights)
edge_labels = {(u, v): f'{d["weight"]}' for u, v, d in G.edges(data=True)}
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)

plt.title(f"Single-Source Shortest Path (Dijkstra) Visualization from Source {source}")
plt.show()

# Print the shortest path distances from the source
print(f"Shortest path distances from source node {source}:")
for node, dist in shortest_paths.items():
    print(f"Node {node}: {dist}")
